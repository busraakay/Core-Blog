#pragma checksum "C:\Users\busra\source\repos\Intern\CoreProject\CoreProject\Areas\Admin\Views\Writer\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "58eb24dd07f996fb32178e391867abb459f0c1d9"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Areas_Admin_Views_Writer_Index), @"mvc.1.0.view", @"/Areas/Admin/Views/Writer/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"58eb24dd07f996fb32178e391867abb459f0c1d9", @"/Areas/Admin/Views/Writer/Index.cshtml")]
    public class Areas_Admin_Views_Writer_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "C:\Users\busra\source\repos\Intern\CoreProject\CoreProject\Areas\Admin\Views\Writer\Index.cshtml"
  
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/AdminLayout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<h1>Yazar Ajax İşlemleri</h1>
<br />
<button type=""button"" id=""btnGetList"" class=""btn btn-outline-primary"">Yazar Listesi</button>
<button type=""button"" id=""btnGetById"" class=""btn btn-outline-success"">Yazar Getir</button>
<button type=""button"" id=""btnAddWriter"" class=""btn btn-outline-info"">Yazar Ekle</button>
<button type=""button"" id=""btnDeleteWriter"" class=""btn btn-outline-danger"">Yazar Sil</button>
<button type=""button"" id=""btnUpdateWriter"" class=""btn btn-outline-warning"">Yazar Güncelle</button>
<br />
<div id=""writerList"">
    Buraya yazarlar gelecek.
</div>
<br />
<div id=""getWriter"">
    Buraya istenilen bir yazar gelecek.
</div>
<br />
<div>
    <input type=""text"" class=""form-control"" id=""writerId"" placeholder=""Yazar ID değerini giriniz."" />
</div>
<br />
<br />
<div>
    <input type=""text"" class=""form-control"" id=""txtWriterId"" placeholder=""Yazar ID"" />
    <input type=""text"" class=""form-control"" id=""txtWriterName"" placeholder=""Yazar Adı"" />
</div>
<br />
<br />
<div>
    <i");
            WriteLiteral(@"nput type=""text"" class=""form-control"" id=""txtDeleteWriterId"" placeholder=""Silinecek Yazar ID"" />
</div>
<br />
<br />
<div>
    <input type=""text"" class=""form-control"" id=""txtUpdateWriterId"" placeholder=""Güncellenecek Yazar ID"" />
    <input type=""text"" class=""form-control"" id=""txtUpdateWriterName"" placeholder=""Güncellenecek Yazar Name"" />
</div>

");
            DefineSection("scripts", async() => {
                WriteLiteral(@"
    <script>
        $(""#btnGetList"").click(function () {
            $.ajax({
                contentType: ""application/json"",
                dataType: ""json"",
                type: ""Get"",
                url: ""/Admin/Writer/WriterList"",
                success: function (func) {
                    let w = jQuery.parseJSON(func);
                    console.log(w);
                    let tableHTML = ""<table class=table table-bordered> <tr><th>Yazar ID</th><th>Yazar Adı</th></tr>"";
                    $.each(w, (index, value) => {
                        tableHTML += `<tr><td>${value.Id}</td> <td>${value.Name}</td><tr>`
                    });
                    tableHTML += ""</table>"";
                    $(""#writerList"").html(tableHTML);
                }
            });
        });

        $(""#btnGetById"").click(x => {
            let id = $(""#writerId"").val();

            $.ajax({
                contentType: ""application/json"",
                dataType: ""json"",
         ");
                WriteLiteral(@"       type: ""Get"",
                url: ""/Admin/Writer/GetWriterByID"",
                data: { writerId: id },
                success: function (func) {
                    let w = jQuery.parseJSON(func);

                    console.log(w);

                    let getValue = `<table class=table table-bordered><tr><th>Yazar ID</th><th>Yazar Adı</th></tr>  <tr><td>${w.Id}</td><td>${w.Name}</td></tr></table>`;
                    $(""#getWriter"").html(getValue);
                }

            })
        });

        $(""#btnAddWriter"").click(function () {
            let writer = {
                Id: $(""#txtWriterId"").val(),
                Name: $(""#txtWriterName"").val()
            };

            $.ajax({
                type: ""Post"",
                url: ""/Admin/Writer/WriterAdd/"",
                data: writer,
                success: function (func) {
                    let result = jQuery.parseJSON(func);
                    alert(""Yazar ekleme işlemi başarılı bir şekilde ge");
                WriteLiteral(@"rçekleşti."");


                }

            })
        })

        $(""#btnDeleteWriter"").click(x => {
            let id = $('#txtDeleteWriterId').val();

            $.ajax({
                type: ""Post"",
                url: ""/Admin/Writer/WriterDelete/"" + id,
                dataType: ""json"",
                success: function (func) {
                    alert(""Yazar silme işlemi başarılı bir şekilde gerçekleşti."");
                }

            })
        })

        $(""#btnUpdateWriter"").click(function () {
            let writer = {
                Id: $(""#txtUpdateWriterId"").val(),
                Name: $(""#txtUpdateWriterName"").val()
            };

            $.ajax({
                type: ""Post"",
                url: ""/Admin/Writer/WriterUpdate/"",
                data: writer,
                success: function (func) {
                    alert(""Yazar güncelleme işlemi başarılı bir şekilde gerçekleşti."");
                }
            })
        })
    </scr");
                WriteLiteral("ipt>\r\n");
            }
            );
            WriteLiteral("\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
